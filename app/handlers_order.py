# app/handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from app.database import requests as rq
from app.database.cache import cart_cache

from app.keyboards_order import get_back_to_cart_keyboard, get_payment_keyboard
from app import config as app_config

router = Router()
logger = logging.getLogger(__name__)


class OrderStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""

    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_email = State()
    waiting_for_city = State()
    waiting_for_street = State()
    waiting_for_postal_code = State()
    waiting_for_comment = State()
    waiting_for_confirmation = State()
    waiting_for_payment = State()


async def show_order_summary(message: Message, order_data: dict, cart: dict) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."""
    text = "<b>üìã –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n\n"
    text += f"<b>–§–ò–û:</b> {order_data['name']}\n"
    text += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data['phone']}\n"
    text += f"<b>Email:</b> {order_data['email']}\n"
    text += f"<b>–ê–¥—Ä–µ—Å:</b> {order_data['city']}, {order_data['street']}, {order_data['postal_code']}\n"
    if order_data.get("comment"):
        text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order_data['comment']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    text += "<b>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n"
    total_price = 0
    for item_id, quantity in cart.items():
        item_data = await rq.get_item(item_id)
        if item_data:
            item_total = item_data["price"] * quantity
            total_price += item_total
            text += f"‚Ä¢ {item_data['name']} - {quantity} {item_data['unit']} ({item_total:.2f} —Ä—É–±.)\n"

    text += f"\n<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total_price:.2f} —Ä—É–±."

    await message.answer(text, reply_markup=get_payment_keyboard(), parse_mode="HTML")


@router.callback_query(F.data == "order")
async def start_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    cart = cart_cache.get_cart(callback.from_user.id)
    if not cart:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    saved_data = await rq.get_user_order_data(callback.from_user.id)
    if saved_data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        await state.set_data(saved_data)
        await show_order_summary(callback.message, saved_data, cart)
        await state.set_state(OrderStates.waiting_for_payment)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞
        await state.set_state(OrderStates.waiting_for_name)
        await callback.message.edit_text(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=get_back_to_cart_keyboard(),
        )


@router.callback_query(F.data == "order:edit")
async def edit_order_data(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞."""
    await state.set_state(OrderStates.waiting_for_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=get_back_to_cart_keyboard()
    )


@router.message(OrderStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    await state.update_data(name=message.text)
    await state.set_state(OrderStates.waiting_for_phone)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=get_back_to_cart_keyboard()
    )


@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    await state.update_data(phone=message.text)
    await state.set_state(OrderStates.waiting_for_email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=get_back_to_cart_keyboard())


@router.message(OrderStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
    await state.update_data(email=message.text)
    await state.set_state(OrderStates.waiting_for_city)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_back_to_cart_keyboard()
    )


@router.message(OrderStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞."""
    await state.update_data(city=message.text)
    await state.set_state(OrderStates.waiting_for_street)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞:", reply_markup=get_back_to_cart_keyboard()
    )


@router.message(OrderStates.waiting_for_street)
async def process_street(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–ª–∏—Ü—ã."""
    await state.update_data(street=message.text)
    await state.set_state(OrderStates.waiting_for_postal_code)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:", reply_markup=get_back_to_cart_keyboard()
    )


@router.message(OrderStates.waiting_for_postal_code)
async def process_postal_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞."""
    await state.update_data(postal_code=message.text)
    await state.set_state(OrderStates.waiting_for_comment)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω):",
        reply_markup=get_back_to_cart_keyboard(),
    )


@router.message(OrderStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    comment = message.text if message.text != "-" else ""
    await state.update_data(comment=comment)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = await state.get_data()
    cart = cart_cache.get_cart(message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    await rq.save_user_order_data(message.from_user.id, order_data)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await show_order_summary(message, order_data, cart)
    await state.set_state(OrderStates.waiting_for_payment)


@router.callback_query(F.data.startswith("payment:"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    payment_method = callback.data.split(":")[1]

    if payment_method == "card":
        await callback.message.edit_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π\n\n" "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=get_back_to_cart_keyboard(),
        )
    elif payment_method == "sbp":
        await callback.message.edit_text(
            "üè¶ –û–ø–ª–∞—Ç–∞ –°–ë–ü\n\n" "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=get_back_to_cart_keyboard(),
        )

    await callback.answer()
