# app/handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from app.database import requests as rq
from app.database.cache import cart_cache
from app.keyboards import (
    menu as menu_keyboard,
    categories_keyboard_builder,
    get_items_by_category_kb,
    back_to_category_kb,
    privacy_keyboard,
    get_catalog_keyboard,
    get_items_keyboard,
    get_cart_keyboard,
    get_item_cart_keyboard,
    get_cart_items_keyboard,
    get_admin_keyboard
)
from app import config as app_config

router = Router()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
async def cmd_start(message: Message):
    try:
        await rq.set_user(message.from_user.id)
        privacy_accepted = await rq.get_user_privacy_status(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(app_config.WELCOME_MESSAGE)
        
        if not privacy_accepted:
            await message.answer(
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
                reply_markup=privacy_keyboard
            )
        else:
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Perfume Shop!', reply_markup=menu_keyboard)
    except Exception as e:
        logger.error(f"Error in cmd_start for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == 'privacy_accept')
async def privacy_accept_handler(callback: CallbackQuery):
    try:
        logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
        await callback.answer('')
        await rq.accept_privacy_policy(callback.from_user.id)
        await callback.message.edit_text('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.', reply_markup=menu_keyboard)
    except Exception as e:
        logger.error(f"Error in privacy_accept_handler for user {callback.from_user.id}: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def check_privacy_accepted(callback: CallbackQuery) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
    try:
        privacy_accepted = await rq.get_user_privacy_status(callback.from_user.id)
        if not privacy_accepted:
            await callback.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.', show_alert=True)
            await callback.message.answer(
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
                reply_markup=privacy_keyboard
            )
            return False
        return True
    except Exception as e:
        logger.error(f"Error checking privacy status for user {callback.from_user.id}: {e}", exc_info=True)
        return False

@router.callback_query(F.data == "catalog")
async def catalog_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return

    categories = await rq.get_categories()
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=menu_keyboard
        )
        return

    keyboard = get_catalog_keyboard(categories)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("category:"))
async def category_items_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: category:category_name:page:page_number
    parts = callback.data.split(":")
    category_name = parts[1]
    page = int(parts[3]) if len(parts) > 3 else 1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items = await rq.get_items_by_category(category_name)
    
    if not items:
        await callback.message.edit_text(
            "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_catalog_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    keyboard = get_items_keyboard(items, category_name, page)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if callback.message.photo:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        await callback.message.answer(message_text, reply_markup=keyboard)
        await callback.message.delete()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(message_text, reply_markup=keyboard)

@router.callback_query(F.data == "ignore")
async def ignore_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."""
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    await callback.answer()

@router.callback_query(F.data.startswith('item:'))
async def item_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    try:
        item_id = callback.data.split(':', 1)[1]
        await callback.answer('')
        item_data = await rq.get_item(item_id)
        print(item_data)

        if item_data:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –Ω–∞–ª–∏—á–∏–∏
            status_emoji = "üîí" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "‚úÖ"
            status_text = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "–î–æ—Å—Ç—É–ø–µ–Ω"
            quantity_text = f"\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {item_data['quantity']} {item_data['unit']}" if item_data['quantity'] > 0 else "\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> –ù–µ—Ç"
            
            price_str = f"{item_data['price']:.2f} —Ä—É–±." if isinstance(item_data.get('price'), (int, float)) else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            text = (f"<b>{item_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                    f"{item_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}\n\n"
                    f"<b>–¶–µ–Ω–∞:</b> {price_str}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}"
                    f"{quantity_text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            if cart_quantity > 0:
                text += f"\n\n<b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {cart_quantity} {item_data['unit']}"
            
            category_name_for_back_button = item_data.get('category_name')
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            page = 1
            if callback.message.text and "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" in callback.message.text:
                try:
                    items = await rq.get_items_by_category(category_name_for_back_button)
                    item_index = next((i for i, item in enumerate(items) if item['id'] == item_id), -1)
                    if item_index != -1:
                        page = (item_index // 10) + 1
                except Exception as e:
                    logger.error(f"Error calculating page number: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
            reply_markup = get_item_cart_keyboard(item_id, callback.from_user.id, item_data)

            if item_data.get('image_url'):
                await callback.message.answer_photo(
                    photo=item_data['image_url'],
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                await callback.message.delete()
            else:
                await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            await callback.message.edit_text('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=await categories_keyboard_builder())
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logger.error(f"Error in item_handler for item '{callback.data}': {e}", exc_info=True)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

@router.callback_query(F.data == 'about')
async def contacts_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    await callback.answer('')
    keyboard = get_catalog_keyboard()
    await callback.message.edit_text(
        app_config.ABOUT,
        reply_markup=keyboard
    )

@router.callback_query(F.data == 'start')
async def back_to_main_menu_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    try:
        await callback.answer('')
        await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Perfume Shop!', reply_markup=menu_keyboard)
    except Exception as e:
        logger.error(f"Error in back_to_main_menu_handler: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "cart")
async def cart_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã."""
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    
    cart = cart_cache.get_cart(callback.from_user.id)
    if cart:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = []
        total_price = 0
        for item_id, quantity in cart.items():
            item_data = await rq.get_item(item_id)
            if item_data:
                cart_items.append({
                    'id': item_id,
                    'name': item_data['name'],
                    'quantity': quantity,
                    'unit': item_data['unit'],
                    'price': item_data['price']
                })
                total_price += item_data['price'] * quantity
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        for item in cart_items:
            text += f"‚Ä¢ {item['name']} - {item['quantity']} {item['unit']} ({item['price'] * item['quantity']:.2f} —Ä—É–±.)\n"
        text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total_price:.2f} —Ä—É–±."
    else:
        await callback.message.edit_text(
        "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
        reply_markup=get_cart_items_keyboard(),
        parse_mode="HTML")
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        text,
        reply_markup=get_cart_items_keyboard(cart_items),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("cart:"))
async def cart_action_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π."""
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: cart:increase:item_id:amount
        _, action, *params = callback.data.split(":")
        
        if action == "increase":
            item_id, amount = params
            amount = float(amount)  # –î–ª—è –º–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º float
            current_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            item_data = await rq.get_item(item_id)
            if not item_data:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            available_quantity = item_data['quantity']
            # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
            can_add = available_quantity - current_quantity
            # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
            amount_to_add = min(amount, can_add)
            
            if amount_to_add > 0:
                cart_cache.add_to_cart(callback.from_user.id, item_id, current_quantity + amount_to_add)
            else:
                await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", show_alert=True)
                return
            
        elif action == "decrease":
            item_id, amount = params
            amount = int(amount)
            current_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ 0
            new_quantity = max(0, current_quantity - amount)
            cart_cache.add_to_cart(callback.from_user.id, item_id, new_quantity)
            
        elif action == "reset":
            item_id = params[0]
            cart_cache.remove_from_cart(callback.from_user.id, item_id)
            
        elif action == "remove":
            item_id = params[0]
            cart_cache.remove_from_cart(callback.from_user.id, item_id)
            
        elif action == "clear":
            cart_cache.clear_cart(callback.from_user.id)
            await callback.message.edit_text(
                "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
                reply_markup=menu_keyboard
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
        item_id = params[0]
        item_data = await rq.get_item(item_id)
        if item_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            status_emoji = "üîí" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "‚úÖ"
            status_text = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "–î–æ—Å—Ç—É–ø–µ–Ω"
            quantity_text = f"\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {item_data['quantity']} {item_data['unit']}" if item_data['quantity'] > 0 else "\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> –ù–µ—Ç"
            
            price_str = f"{item_data['price']:.2f} —Ä—É–±." if isinstance(item_data.get('price'), (int, float)) else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            text = (f"<b>{item_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                    f"{item_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}\n\n"
                    f"<b>–¶–µ–Ω–∞:</b> {price_str}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}"
                    f"{quantity_text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            if cart_quantity > 0:
                text += f"\n\n<b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {cart_quantity} {item_data['unit']}"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_item_cart_keyboard(item_id, callback.from_user.id, item_data),
                parse_mode="HTML"
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in cart_action_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π", show_alert=True)
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in app_config.ADMIN_IDS
@router.message(Command("admin"))
async def admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
    if not is_admin(message.from_user.id):
        return
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data.startswith("admin:"))
async def process_admin_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = callback.data.split(":")[1]
    
    if action == "stats":
        await callback.message.edit_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=get_admin_keyboard()
        )
    elif action == "sync":
        await callback.message.edit_text(
            "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=get_admin_keyboard()
        )
    
    await callback.answer()