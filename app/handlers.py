# app/handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from typing import Optional # –î–æ–±–∞–≤–∏–º Optional
from aiogram.exceptions import TelegramBadRequest

from app.database import requests as rq
from app.database.cache import cart_cache
from app.keyboards import (
    menu as menu_keyboard,
    categories_keyboard_builder,
    # get_items_by_category_kb, # –í–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–æ
    # back_to_category_kb, # –í–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–æ
    privacy_keyboard,
    get_catalog_keyboard,
    get_items_keyboard,
    # get_cart_keyboard, # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, —á–∞—Å—Ç—å –¥—Ä—É–≥–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    get_item_cart_keyboard,
    get_cart_items_keyboard,
    get_admin_keyboard,
    get_cancel_search_keyboard,  # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    get_search_results_keyboard, # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
)
from app import config as app_config

router = Router()
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    waiting_for_query = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    try:
        await rq.set_user(message.from_user.id)
        privacy_accepted = await rq.get_user_privacy_status(message.from_user.id)
        
        await message.answer(app_config.WELCOME_MESSAGE)
        
        if not privacy_accepted:
            await message.answer(
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
                reply_markup=privacy_keyboard
            )
        else:
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Perfume Shop!', reply_markup=menu_keyboard)
    except Exception as e:
        logger.error(f"Error in cmd_start for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == 'privacy_accept')
async def privacy_accept_handler(callback: CallbackQuery):
    try:
        logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
        await callback.answer('')
        await rq.accept_privacy_policy(callback.from_user.id)
        await callback.message.edit_text('–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.', reply_markup=menu_keyboard)
    except Exception as e:
        logger.error(f"Error in privacy_accept_handler for user {callback.from_user.id}: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

async def check_privacy_accepted(callback_or_message: Message | CallbackQuery) -> bool: # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è Message –∏–ª–∏ CallbackQuery
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
    user_id = callback_or_message.from_user.id
    try:
        privacy_accepted = await rq.get_user_privacy_status(user_id)
        if not privacy_accepted:
            message_target = callback_or_message.message if isinstance(callback_or_message, CallbackQuery) else callback_or_message
            if isinstance(callback_or_message, CallbackQuery):
                 await callback_or_message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.', show_alert=True)

            await message_target.answer(
                '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.',
                reply_markup=privacy_keyboard
            )
            return False
        return True
    except Exception as e:
        logger.error(f"Error checking privacy status for user {user_id}: {e}", exc_info=True)
        return False

@router.callback_query(F.data == "catalog")
async def catalog_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return

    categories = await rq.get_categories()
    if not categories:
        await callback.message.edit_text(
            "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=menu_keyboard
        )
        return

    keyboard = get_catalog_keyboard(categories)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("category:"))
async def category_items_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return

    parts = callback.data.split(":")
    category_name = parts[1]
    page = int(parts[3]) if len(parts) > 3 else 1

    items = await rq.get_items_by_category(category_name)
    
    if not items:
        all_categories = await rq.get_categories()
        try:
            await callback.message.edit_text(
                "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=get_catalog_keyboard(all_categories)
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                logger.debug("Message not modified (no items in category), ignoring.")
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            else:
                raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ TelegramBadRequest
        await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        return

    keyboard = get_items_keyboard(items, category_name, page)
    message_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    try:
        if callback.message.photo:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, –∞ –Ω–æ–≤–æ–µ - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ–∫—Å—Ç),
            # —Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
            await callback.message.delete()
            await callback.message.answer(message_text, reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
            await callback.message.edit_text(message_text, reply_markup=keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug("Message not modified (category items), ignoring.")
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        else:
            logger.error(f"TelegramBadRequest in category_items_handler: {e}", exc_info=True)
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ
            # await callback.message.answer(message_text, reply_markup=keyboard)
            # await callback.message.delete() # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ
            raise # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    except Exception as e_main:
        logger.error(f"Error in category_items_handler editing/sending message: {e_main}", exc_info=True)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫

    await callback.answer()
@router.callback_query(F.data == "ignore")
async def ignore_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    await callback.answer()

@router.callback_query(F.data.startswith('item:'))
async def item_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    try:
        data_parts = callback.data.split(':') # item:item_id:source_type:detail1:detail2...
        item_id = data_parts[1]
        
        source_type: Optional[str] = None
        source_details: dict = {}

        if len(data_parts) > 2:
            source_type = data_parts[2] # category –∏–ª–∏ search_results
            if source_type == "category" and len(data_parts) >= 5: # item:id:category:name:page
                source_details['name'] = data_parts[3]
                try:
                    source_details['page'] = int(data_parts[4])
                except (ValueError, IndexError):
                    source_details['page'] = 1
            elif source_type == "search_results" and len(data_parts) >= 5: # item:id:search_results:query:page
                source_details['query'] = data_parts[3]
                try:
                    source_details['page'] = int(data_parts[4])
                except (ValueError, IndexError):
                    source_details['page'] = 1
            else: # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º source_type
                source_type = None 
                source_details = {}


        await callback.answer('') # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
        item_data = await rq.get_item(item_id)

        if item_data:
            status_emoji = "üîí" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "‚úÖ"
            status_text = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "–î–æ—Å—Ç—É–ø–µ–Ω"
            quantity_text = f"\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {item_data['quantity']} {item_data['unit']}" if item_data['quantity'] > 0 else "\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> –ù–µ—Ç"
            
            price_str = f"{item_data['price']:.2f} —Ä—É–±." if isinstance(item_data.get('price'), (int, float)) else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            text = (f"<b>{item_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                    f"{item_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}\n\n"
                    f"<b>–¶–µ–Ω–∞:</b> {price_str}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}"
                    f"{quantity_text}")
            
            cart_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            if cart_quantity > 0:
                text += f"\n\n<b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {cart_quantity} {item_data['unit']}"
            
            reply_markup = get_item_cart_keyboard(
                item_id, 
                callback.from_user.id, 
                item_data,
                source_type=source_type,
                source_details=source_details
            )

            if item_data.get('image_url'):
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–ø—Ä—ã–≥–∞–Ω–∏–µ" –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ
                if callback.message.photo is None : # –µ—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç —Ñ–æ—Ç–æ
                     await callback.message.delete()
                await callback.message.answer_photo(
                    photo=item_data['image_url'],
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                # –ï—Å–ª–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–æ —Ñ–æ—Ç–æ, –æ–Ω–æ –£–ñ–ï —É–¥–∞–ª–µ–Ω–æ —ç—Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π —Ä–∞–Ω–µ–µ,
                # –∏–ª–∏ –º—ã –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –∏ –æ–Ω–æ –∑–∞–º–µ–Ω–∏–ª–æ—Å—å.
                # –ï—Å–ª–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –ë–´–õ–û —Ñ–æ—Ç–æ, –∞ –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ, —Ç–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ–º.
                # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ç–æ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏–∂–µ.
                # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Å—Ç–∞–ª–∞ —Å–ª–æ–∂–Ω–µ–µ, –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.
                # –ü—Ä–æ—â–µ: –µ—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                if callback.message.text: # –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º
                    try:
                        await callback.message.delete()
                    except Exception as e_del:
                        logger.warning(f"Could not delete previous text message for item photo: {e_del}")

            else:
                # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
                if callback.message.photo:
                    try:
                        await callback.message.delete()
                    except Exception as e_del:
                        logger.warning(f"Could not delete previous photo message for item text: {e_del}")
                    await callback.message.answer(text, reply_markup=reply_markup, parse_mode="HTML")
                else: # –∏ —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
                    await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            all_categories = await rq.get_categories() # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
            await callback.message.edit_text('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=get_catalog_keyboard(all_categories))
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True) # show_alert –¥–ª—è callback.answer
    except Exception as e:
        logger.error(f"Error in item_handler for item '{callback.data}': {e}", exc_info=True)
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)


@router.callback_query(F.data == 'about')
async def contacts_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    await callback.answer('')
    all_categories = await rq.get_categories() # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
    await callback.message.edit_text(
        app_config.ABOUT,
        reply_markup=get_catalog_keyboard(all_categories) # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    )

@router.callback_query(F.data == 'start')
async def back_to_main_menu_handler(callback: CallbackQuery, state: FSMContext): # –î–æ–±–∞–≤–∏–ª state
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    # if not await check_privacy_accepted(callback): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–ª–∏—à–Ω–µ–π, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    #     return
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.answer('')
        await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Perfume Shop!', reply_markup=menu_keyboard)
    except Exception as e:
        logger.error(f"Error in back_to_main_menu_handler: {e}", exc_info=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

# --- SEARCH HANDLERS ---
@router.callback_query(F.data == 'search_start')
async def search_start_handler(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} initiated search.")
    if not await check_privacy_accepted(callback):
        return
    await state.set_state(SearchStates.waiting_for_query)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):",
        reply_markup=get_cancel_search_keyboard() 
    )
    await callback.answer()

@router.message(SearchStates.waiting_for_query, F.text)
async def process_search_query_handler(message: Message, state: FSMContext):
    query = message.text.strip()
    user_id = message.from_user.id
    
    if not await check_privacy_accepted(message): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        await state.clear()
        return

    logger.info(f"User {user_id} submitted search query: '{query}'")

    if len(query) < 3:
        await message.answer(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_cancel_search_keyboard()
        )
        return

    await state.update_data(search_query=query) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items = await rq.search_items_by_name(query)

    if not items:
        await message.answer(
            f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=menu_keyboard 
        )
        await state.clear()
        return

    keyboard = get_search_results_keyboard(items, query, page=1)
    await message.answer(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':",
        reply_markup=keyboard
    )
    await state.clear()

@router.callback_query(F.data == 'cancel_search', SearchStates.waiting_for_query) # –£—Ç–æ—á–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def cancel_search_handler(callback: CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.from_user.id} cancelled search.")
    await state.clear()
    await callback.message.edit_text(
        '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.',
        reply_markup=menu_keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("search_page:"))
async def search_page_handler(callback: CallbackQuery): # state –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ query –≤ callback
    try:
        _, query_term, page_str = callback.data.split(":", 2) # –ò—Å–ø–æ–ª—å–∑—É–µ–º maxsplit=2
        page = int(page_str)
    except ValueError:
        logger.error(f"Invalid search_page callback_data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    logger.info(f"User {callback.from_user.id} requested search page {page} for query '{query_term}'")
    
    if not await check_privacy_accepted(callback): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
        return

    items = await rq.search_items_by_name(query_term) 

    if not items: 
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.",
            reply_markup=menu_keyboard
        )
        await callback.answer()
        return

    keyboard = get_search_results_keyboard(items, query_term, page)
    await callback.message.edit_text(
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query_term}' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):",
        reply_markup=keyboard
    )
    await callback.answer()

# --- END SEARCH HANDLERS ---

@router.callback_query(F.data == "cart")
async def cart_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    
    cart = cart_cache.get_cart(callback.from_user.id)
    cart_items_details = [] # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    total_price = 0

    if cart:
        for item_id, quantity in cart.items():
            item_data = await rq.get_item(item_id)
            if item_data:
                cart_items_details.append({ # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                    'id': item_id,
                    'name': item_data['name'],
                    'quantity': quantity,
                    'unit': item_data['unit'],
                    'price': item_data['price']
                })
                total_price += item_data['price'] * quantity
        
        text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        if not cart_items_details: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –±—ã–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –Ω–æ –Ω–µ –Ω–∞—à–ª–∏—Å—å –≤ –±–∞–∑–µ
             text += "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –û–Ω–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã."
        else:
            for item_detail in cart_items_details:
                text += f"‚Ä¢ {item_detail['name']} - {item_detail['quantity']} {item_detail['unit']} ({item_detail['price'] * item_detail['quantity']:.2f} —Ä—É–±.)\n"
        text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total_price:.2f} —Ä—É–±."
        
        reply_markup = get_cart_items_keyboard(cart_items_details) # –ü–µ—Ä–µ–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
    else:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        reply_markup = get_cart_items_keyboard() # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã

    await callback.message.edit_text(
        text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("cart:"))
async def cart_action_handler(callback: CallbackQuery):
    logger.info(f"User {callback.from_user.id} pressed button: {callback.data}")
    if not await check_privacy_accepted(callback):
        return
    
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞ callback –æ—Ç–≤–µ—Ç–∏–ª–∏, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–∞–ª–∞"
        # –î–µ–ª–∞–µ–º —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–Ω–Ω–∏—Ö –≤—ã—Ö–æ–¥–æ–≤ —Å show_alert=True
        # await callback.answer() # –ü–µ—Ä–µ–Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É, –µ—Å–ª–∏ –Ω–µ—Ç alert

        _, action, *params = callback.data.split(":")
        item_id_for_update: Optional[str] = None 

        if action == "increase":
            item_id, amount_str = params
            item_id_for_update = item_id
            
            item_data = await rq.get_item(item_id)
            if not item_data:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            amount: float | int
            if item_data['unit'] == app_config.ITEM_UNIT_ML:
                amount = float(amount_str)
            else: 
                amount = int(amount_str)

            current_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            available_quantity = item_data['quantity']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–æ–≤–∞—Ä
            if item_data['status'] == app_config.ITEM_STATUS_RESERVED:
                await callback.answer("–¢–æ–≤–∞—Ä –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞.", show_alert=True)
                return

            can_add = available_quantity - current_quantity
            amount_to_add = min(amount, can_add)
            
            if amount_to_add > 0:
                new_cart_quantity = current_quantity + amount_to_add
                if isinstance(new_cart_quantity, float): new_cart_quantity = round(new_cart_quantity, 2)
                cart_cache.add_to_cart(callback.from_user.id, item_id, new_cart_quantity)
                await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: +{amount_to_add} {item_data['unit']}")
            else:
                await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.", show_alert=True)
                # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞, —Ç.–∫. –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å
                return 
            
        elif action == "decrease":
            item_id, amount_str = params
            item_id_for_update = item_id
            
            item_data = await rq.get_item(item_id) 
            if not item_data:
                await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            amount_val: float | int
            if item_data['unit'] == app_config.ITEM_UNIT_ML:
                amount_val = float(amount_str)
            else: 
                amount_val = int(amount_str)

            current_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id)
            new_quantity = max(0, current_quantity - amount_val)
            if isinstance(new_quantity, float): new_quantity = round(new_quantity, 2)
            
            cart_cache.add_to_cart(callback.from_user.id, item_id, new_quantity)
            await callback.answer(f"–£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {new_quantity} {item_data['unit']}" if new_quantity > 0 else "–¢–æ–≤–∞—Ä —É–±—Ä–∞–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            
        elif action == "reset": 
            item_id = params[0]
            item_id_for_update = item_id
            cart_cache.remove_from_cart(callback.from_user.id, item_id)
            await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±—Ä–æ—à–µ–Ω–æ")
            
        elif action == "remove": 
            item_id = params[0]
            cart_cache.remove_from_cart(callback.from_user.id, item_id)
            await cart_handler(callback) 
            await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            return 
            
        elif action == "clear":
            cart_cache.clear_cart(callback.from_user.id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
            if callback.message and callback.message.photo:
                await callback.message.delete()
                await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=menu_keyboard)
            elif callback.message:
                 await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=menu_keyboard)
            else: # –ï—Å–ª–∏ callback.message None (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                bot_instance = callback.bot # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ callback
                await bot_instance.send_message(callback.from_user.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=menu_keyboard)

            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –Ω–∞–¥ –Ω–µ–π
        if item_id_for_update:
            item_data = await rq.get_item(item_id_for_update)
            if item_data:
                status_emoji = "üîí" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "‚úÖ"
                status_text = "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω" if item_data['status'] == app_config.ITEM_STATUS_RESERVED else "–î–æ—Å—Ç—É–ø–µ–Ω"
                quantity_text = f"\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {item_data['quantity']} {item_data['unit']}" if item_data['quantity'] > 0 else "\n<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> –ù–µ—Ç"
                
                price_str = f"{item_data['price']:.2f} —Ä—É–±." if isinstance(item_data.get('price'), (int, float)) else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                text = (f"<b>{item_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
                        f"{item_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')}\n\n"
                        f"<b>–¶–µ–Ω–∞:</b> {price_str}\n"
                        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}"
                        f"{quantity_text}")
                
                cart_quantity = cart_cache.get_item_quantity(callback.from_user.id, item_id_for_update)
                if cart_quantity > 0:
                    text += f"\n\n<b>–í –∫–æ—Ä–∑–∏–Ω–µ:</b> {cart_quantity} {item_data['unit']}"
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º source_type –∏ source_details, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Ç–æ–≤–∞—Ä–∞
                source_type: Optional[str] = None
                source_details: dict = {}
                if callback.message and callback.message.reply_markup:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –≤ —Ç–µ–∫—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
                    # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –∏ –Ω–µ –æ—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞.
                    # –ü—Ä–æ—â–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å source_type –∏ source_details –≤ callback_data –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã,
                    # –Ω–æ —ç—Ç–æ —Å–∏–ª—å–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç callback_data.
                    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–∞ –∏–∑ –ø–æ–∏—Å–∫–∞, —Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ cart_action.
                    # –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ, get_item_cart_keyboard –¥–æ–ª–∂–Ω–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å source_type/details –∏
                    # –∫–Ω–æ–ø–∫–∏ +/-/—Å–±—Ä–æ—Å–∏—Ç—å –¥–æ–ª–∂–Ω—ã –∏—Ö –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–≤–æ–π callback_data.
                    pass # –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –ª–æ–≥–∏–∫—É –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π

                reply_markup = get_item_cart_keyboard(
                    item_id_for_update, 
                    callback.from_user.id, 
                    item_data,
                    source_type=source_type, # –ë—É–¥–µ—Ç None, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å
                    source_details=source_details
                )

                # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ item_handler)
                if callback.message: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if item_data.get('image_url'):
                        if callback.message.photo: # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å —Ñ–æ—Ç–æ
                            try:
                                await callback.message.edit_caption(caption=text, reply_markup=reply_markup, parse_mode="HTML")
                            except Exception as e_caption:
                                logger.warning(f"Failed to edit caption, attempting delete and send: {e_caption}")
                                await callback.message.delete()
                                await callback.message.answer_photo(
                                    photo=item_data['image_url'], caption=text, reply_markup=reply_markup, parse_mode="HTML"
                                )
                        else: # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∞ –Ω—É–∂–Ω–æ —Å —Ñ–æ—Ç–æ
                            await callback.message.delete()
                            await callback.message.answer_photo(
                                photo=item_data['image_url'], caption=text, reply_markup=reply_markup, parse_mode="HTML"
                            )
                    else: # –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–µ–∫—Å—Ç–æ–≤—ã–π
                        if callback.message.photo: # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∞ –Ω—É–∂–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                            await callback.message.delete()
                            await callback.message.answer(text, reply_markup=reply_markup, parse_mode="HTML")
                        else: # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                            try:
                                await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
                            except Exception as e_text:
                                logger.warning(f"Failed to edit text, attempting delete and send: {e_text}")
                                await callback.message.delete()
                                await callback.message.answer(text, reply_markup=reply_markup, parse_mode="HTML")
                else: # callback.message is None - –æ—á–µ–Ω—å –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ
                     logger.error("callback.message is None in cart_action_handler during update.")


        # –ï—Å–ª–∏ –º—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ —Ä–∞–Ω–µ–µ —Å show_alert=True –∏–ª–∏ –Ω–µ –≤—ã—à–ª–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–∞ callback.answer() —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω, –µ—Å–ª–∏ –º—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –≤–µ—Ç–∫–∏ —Å return
        # –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –≤–µ—Ç–æ–∫ callback.answer —É–∂–µ –µ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∑–¥–µ—Å—å:
        # await callback.answer() # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —É–∂–µ –µ—Å—Ç—å

    except Exception as e:
        logger.error(f"Error in cart_action_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ—Ä–∑–∏–Ω–æ–π", show_alert=True)
def is_admin(user_id: int) -> bool:
    return user_id in app_config.ADMIN_IDS

@router.message(Command("admin"))
async def admin_command(message: Message):
    if not is_admin(message.from_user.id):
        # –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        return 
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data.startswith("admin:")) # –ë–µ–∑ lambda –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
async def process_admin_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = callback.data.split(":")[1]
    
    if action == "stats":
        await callback.message.edit_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=get_admin_keyboard() # –í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        )
    elif action == "sync":
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –≤—Ä—É—á–Ω—É—é
        try:
            await sync_privacy_cache()
            await sync_catalog_cache()
            await callback.message.edit_text(
                "üîÑ –ö—ç—à–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!",
                reply_markup=get_admin_keyboard()
            )
            await callback.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"Admin manual sync error: {e}", exc_info=True)
            await callback.message.edit_text(
                "üîÑ –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.",
                reply_markup=get_admin_keyboard()
            )
            await callback.answer("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.", show_alert=True)
    
    # await callback.answer() # –£–∂–µ –≤—ã–∑–≤–∞–Ω –≤ —É—Å–ø–µ—à–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏–ª–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ