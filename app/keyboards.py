# app/keyboards.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database import requests as rq
from app.database.cache import (
    cart_cache,
    catalog_cache,
)  # –î–æ–±–∞–≤–∏–ª catalog_cache –¥–ª—è get_categories
import logging
from typing import Optional, Union  # –î–æ–±–∞–≤–∏–ª Union –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

from app import config as app_config

logger = logging.getLogger(__name__)

privacy_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=app_config.PRIVACY_URL
            )
        ],
        [InlineKeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", callback_data="privacy_accept")],
    ]
)

menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üì¶", callback_data="catalog")],
        [
            InlineKeyboardButton(text="–ü–æ–∏—Å–∫ üîé", callback_data="search_start")
        ],  # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        [InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url=app_config.SUPPORT_URL
            )
        ],
        [InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ ‚ÑπÔ∏è", callback_data="about")],
    ]
)


async def categories_keyboard_builder():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π, get_catalog_keyboard –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—â–µ
    all_categories_data = await rq.get_categories()
    builder = InlineKeyboardBuilder()
    if all_categories_data:
        for category_data in all_categories_data:
            builder.row(
                InlineKeyboardButton(
                    text=category_data["name"],
                    callback_data=f"category:{category_data['name']}:page:1",  # –î–æ–±–∞–≤–∏–ª page:1 –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                )
            )
    builder.row(InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start"))
    return builder.as_markup()


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞, —Ç.–∫. –µ—Å—Ç—å get_items_keyboard
# async def get_items_by_category_kb(category_name: str):
#     all_items_data = await rq.get_items_by_category(category_name)
#     builder = InlineKeyboardBuilder()
#     if all_items_data:
#         for item_data in all_items_data:
#             builder.row(InlineKeyboardButton(
#                 text=item_data['name'],
#                 callback_data=f"item:{item_data['id']}:category:{category_name}:1" # –û–±–Ω–æ–≤–ª–µ–Ω callback_data
#                 ))
#     builder.row(InlineKeyboardButton(text='–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='catalog'))
#     return builder.as_markup()


def get_items_keyboard(
    items: list, category_name: str, page: int = 1, items_per_page: int = 10
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    current_page_items = items[start_idx:end_idx]

    for item in current_page_items:
        status_emoji = (
            "üîí" if item["status"] == app_config.ITEM_STATUS_RESERVED else "‚úÖ"
        )
        quantity_text = (
            f" ({item['quantity']} {item['unit']})" if item["quantity"] > 0 else ""
        )
        price_str = (
            f"{item['price']:.0f}‚ÇΩ"
            if isinstance(item["price"], (int, float))
            else "–¶–µ–Ω–∞?"
        )  # .0f –¥–ª—è —Ü–µ–ª—ã—Ö —Ä—É–±–ª–µ–π
        button_text = f"{status_emoji} {item['name']} - {price_str}{quantity_text}"

        # –û–±–Ω–æ–≤–ª—è–µ–º callback_data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        callback_data_item = f"item:{item['id']}:category:{category_name}:{page}"
        builder.row(
            InlineKeyboardButton(text=button_text, callback_data=callback_data_item)
        )

    total_pages = (len(items) + items_per_page - 1) // items_per_page
    pagination_row = []

    if page > 1:
        pagination_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è", callback_data=f"category:{category_name}:page:{page-1}"
            )
        )

    if total_pages > 1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore")
        )

    if page < total_pages:
        pagination_row.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è", callback_data=f"category:{category_name}:page:{page+1}"
            )
        )

    if pagination_row:
        builder.row(*pagination_row)

    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog"))
    return builder.as_markup()


def get_catalog_keyboard(categories: list = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if categories:
        for category in categories:
            builder.row(
                InlineKeyboardButton(
                    text=category["name"],
                    callback_data=f"category:{category['name']}:page:1",
                )
            )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    return builder.as_markup()


def get_item_cart_keyboard(
    item_id: str,
    user_id: int,
    item_data: dict,
    source_type: Optional[str] = None,
    source_details: Optional[dict] = None,
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    current_quantity: Union[int, float] = cart_cache.get_item_quantity(user_id, item_id)
    item_available_quantity = item_data.get("quantity", 0)
    item_status = item_data.get("status")
    item_unit = item_data.get("unit", app_config.ITEM_UNIT_PCS)
    can_add_to_cart = (
        item_status == app_config.ITEM_STATUS_AVAILABLE and item_available_quantity > 0
    )

    if can_add_to_cart:
        if item_unit == app_config.ITEM_UNIT_PCS:  # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —à—Ç—É–∫–∞—Ö
            # --- –†—è–¥ –∫–Ω–æ–ø–æ–∫ —Å –º–∞–ª—ã–º —à–∞–≥–æ–º (-1, +1) ---
            small_step_buttons = []
            if (
                current_quantity >= 1
            ):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É -1, –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ö–æ—Ç—è –±—ã 1 —à—Ç.
                small_step_buttons.append(
                    InlineKeyboardButton(
                        text="-1", callback_data=f"cart:decrease:{item_id}:1"
                    )
                )

            current_display_val = (
                int(current_quantity)
                if isinstance(current_quantity, float)
                else current_quantity
            )
            current_display_text = (
                f"{current_display_val} —à—Ç" if current_quantity > 0 else "0 —à—Ç"
            )
            small_step_buttons.append(
                InlineKeyboardButton(text=current_display_text, callback_data="ignore")
            )

            if current_quantity < item_available_quantity:  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ
                small_step_buttons.append(
                    InlineKeyboardButton(
                        text="+1", callback_data=f"cart:increase:{item_id}:1"
                    )
                )

            if (
                small_step_buttons
            ):  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ (–æ–±—ã—á–Ω–æ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º)
                builder.row(*small_step_buttons)

            # --- –†—è–¥ –∫–Ω–æ–ø–æ–∫ —Å –±–æ–ª—å—à–∏–º —à–∞–≥–æ–º (-5, +5) ---
            large_step_buttons = []
            # –ö–Ω–æ–ø–∫–∞ -5: –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ >= 5 —à—Ç—É–∫
            if current_quantity >= 5:
                large_step_buttons.append(
                    InlineKeyboardButton(
                        text="-5", callback_data=f"cart:decrease:{item_id}:5"
                    )
                )

            # –ü—É—Å—Ç—ã—à–∫–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–∏–º–º–µ—Ç—Ä–∏—è, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            # if current_quantity >=5 and current_quantity + 5 <= item_available_quantity :
            #     large_step_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

            # –ö–Ω–æ–ø–∫–∞ +5: –µ—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ö–æ—Ç—è –±—ã 5 —à—Ç—É–∫
            if current_quantity + 5 <= item_available_quantity:
                large_step_buttons.append(
                    InlineKeyboardButton(
                        text="+5", callback_data=f"cart:increase:{item_id}:5"
                    )
                )

            if (
                large_step_buttons
            ):  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–æ–≥–æ —à–∞–≥–∞
                builder.row(*large_step_buttons)

        elif item_unit == app_config.ITEM_UNIT_ML:  # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö
            if current_quantity > 0:
                qty_display_text = (
                    str(int(current_quantity))
                    if isinstance(current_quantity, float)
                    and current_quantity.is_integer()
                    else str(current_quantity)
                )
                builder.row(
                    InlineKeyboardButton(
                        text=f"–í –∫–æ—Ä–∑–∏–Ω–µ: {qty_display_text} –º–ª", callback_data="ignore"
                    ),
                    InlineKeyboardButton(
                        text="–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"cart:reset:{item_id}"
                    ),
                )

            specific_order_steps = item_data.get("order_steps")
            order_steps_to_use = []
            if (
                specific_order_steps
                and isinstance(specific_order_steps, list)
                and len(specific_order_steps) > 0
            ):
                order_steps_to_use = [
                    s
                    for s in specific_order_steps
                    if isinstance(s, (int, float)) and s > 0
                ]
            else:
                order_steps_to_use = [1, 2, 3, 5, 10]

            step_buttons_row1 = []
            step_buttons_row2 = []
            for i, step in enumerate(order_steps_to_use):
                if current_quantity + step <= item_available_quantity:
                    step_text = (
                        str(int(step))
                        if isinstance(step, float) and step.is_integer()
                        else str(step)
                    )
                    btn = InlineKeyboardButton(
                        text=f"+{step_text}–º–ª",
                        callback_data=f"cart:increase:{item_id}:{step}",
                    )
                    if len(step_buttons_row1) < 3:
                        step_buttons_row1.append(btn)
                    else:
                        step_buttons_row2.append(btn)
            if step_buttons_row1:
                builder.row(*step_buttons_row1)
            if step_buttons_row2:
                builder.row(*step_buttons_row2)
    else:
        if item_status == app_config.ITEM_STATUS_RESERVED:
            builder.row(
                InlineKeyboardButton(text="üîí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω", callback_data="ignore")
            )
        elif item_available_quantity <= 0:
            builder.row(
                InlineKeyboardButton(text="–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="ignore")
            )

        if current_quantity > 0:
            qty_display_text = ""
            unit_display_text = "–º–ª" if item_unit == app_config.ITEM_UNIT_ML else "—à—Ç"

            if isinstance(current_quantity, float):
                qty_display_text = (
                    str(int(current_quantity))
                    if current_quantity.is_integer()
                    else str(current_quantity)
                )
            else:
                qty_display_text = str(current_quantity)

            if not can_add_to_cart:
                builder.row(
                    InlineKeyboardButton(
                        text=f"–í –∫–æ—Ä–∑–∏–Ω–µ: {qty_display_text} {unit_display_text} (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)",
                        callback_data="ignore",
                    )
                )

            if item_unit == app_config.ITEM_UNIT_ML:
                builder.row(
                    InlineKeyboardButton(
                        text="–°–±—Ä–æ—Å–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                        callback_data=f"cart:reset:{item_id}",
                    )
                )
            elif item_unit == app_config.ITEM_UNIT_PCS:
                decrease_amount = (
                    int(current_quantity)
                    if isinstance(current_quantity, float)
                    else current_quantity
                )
                builder.row(
                    InlineKeyboardButton(
                        text="–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
                        callback_data=f"cart:decrease:{item_id}:{decrease_amount}",
                    )
                )

    builder.row(InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))

    if source_type == "category" and source_details and "name" in source_details:
        category_name_for_back = source_details["name"]
        page_for_back = source_details.get("page", 1)
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                callback_data=f"category:{category_name_for_back}:page:{page_for_back}",
            )
        )
    elif (
        source_type == "search_results" and source_details and "query" in source_details
    ):
        query_for_back = source_details["query"]
        page_for_back = source_details.get("page", 1)
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞",
                callback_data=f"search_page:{query_for_back}:{page_for_back}",
            )
        )
    else:
        category_name_from_item = item_data.get("category_name")
        if category_name_from_item:
            builder.row(
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    callback_data=f"category:{category_name_from_item}:page:1",
                )
            )
        else:
            builder.row(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
            )

    return builder.as_markup()


def get_cart_items_keyboard(cart_items: list = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if cart_items:
        for item in cart_items:
            builder.row(
                InlineKeyboardButton(
                    text=f"‚ùå {item['name']} - {item['quantity']} {item['unit']}",
                    callback_data=f"cart:remove:{item['id']}",
                )
            )
        builder.row(
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear"),
            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõçÔ∏è", callback_data="order"),
        )
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ (–≤ –∫–∞—Ç–∞–ª–æ–≥)", callback_data="catalog"
            )
        )
    else:  # –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        builder.row(InlineKeyboardButton(text=" –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog"))
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        )

    return builder.as_markup()


# --- SEARCH KEYBOARDS ---
def get_cancel_search_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_search"))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∏—Å–∫–∞—Ç—å
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    return builder.as_markup()


def get_search_results_keyboard(
    items: list, query_term: str, page: int = 1, items_per_page: int = 5
) -> InlineKeyboardMarkup:
    # items_per_page –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—å—à–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    builder = InlineKeyboardBuilder()

    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    current_page_items = items[start_idx:end_idx]

    for item in current_page_items:
        status_emoji = (
            "üîí" if item["status"] == app_config.ITEM_STATUS_RESERVED else "‚úÖ"
        )
        quantity_text = (
            f" ({item['quantity']} {item['unit']})" if item["quantity"] > 0 else ""
        )
        price_str = (
            f"{item['price']:.0f}‚ÇΩ"
            if isinstance(item["price"], (int, float))
            else "–¶–µ–Ω–∞?"
        )
        button_text = f"{status_emoji} {item['name']} - {price_str}{quantity_text}"

        # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø–æ–∏—Å–∫) –∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        callback_data_item = f"item:{item['id']}:search_results:{query_term}:{page}"
        builder.row(
            InlineKeyboardButton(text=button_text, callback_data=callback_data_item)
        )

    total_pages = (len(items) + items_per_page - 1) // items_per_page
    pagination_row = []

    if page > 1:
        pagination_row.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è", callback_data=f"search_page:{query_term}:{page-1}"
            )
        )
    if total_pages > 1:
        pagination_row.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore")
        )
    if page < total_pages:
        pagination_row.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è", callback_data=f"search_page:{query_term}:{page+1}"
            )
        )

    if pagination_row:
        builder.row(*pagination_row)

    builder.row(
        InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üîé", callback_data="search_start")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )

    return builder.as_markup()


# --- END SEARCH KEYBOARDS ---


def get_admin_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats"))
    builder.row(
        InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—ç—à–∞", callback_data="admin:sync")
    )
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    )
    return builder.as_markup()
